@model LogModel
@{
    var thisUrl = $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}{Context.Request.QueryString}";
    var sourcemessage = $"{Model.Data.Files.Length} Files";
    if (Model.Data.Files.Length == 1)
    {
        sourcemessage = Model.Data.Files.First();
    }
    ViewData["Title"] = $"R{Model.Data.RoundID}/{sourcemessage}";
    // <meta property="og:url" content="https://scrubby.melonmesa.com/file/@Model.SourceFile._id" />
}

@section AddtoHead{
    <meta property="og:title" content="@($"R{Model.Data.RoundID}/{sourcemessage}")"/>
    <meta property="og:type" content="website"/>
    <meta property="og:image" content="https://scrubby.melonmesa.com/images/ScrubbyBar.svg"/>
    <meta property="og:site_name" content="Scrubby"/>
    <meta property="og:description" content="@($"Log messages for {sourcemessage} on R{Model.Data.RoundID}")"/>
}

<script>let clipboard = new ClipboardJS('.copy-link');</script>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a asp-controller="Home" asp-action="Index">Gateway</a>
        </li>
        <li class="breadcrumb-item">
            <a asp-controller="Round" asp-action="FetchRound" asp-route-id="@Model.Data.RoundID">@($"R{Model.Data.RoundID}")</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">@sourcemessage</li>
    </ol>
</nav>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-auto order-last order-md-2">
            <div style="text-align: center;" >
                <h1>Round @Model.Data.RoundID - @sourcemessage</h1>
                <span id="message-count" class="badge bg-success align-top hidden"><span id="num-messages"></span> Messages</span>
            </div>
        </div>
    </div>
</div>
<br/>
<div class="d-flex justify-content-center" id="loading" width="100%">
    <h4 class="pt-5 pb-5">Loading...</h4>
</div>
<table class="table table-condensed logmessage-table display hidden" id="tbl" width="100%">
    <thead>
    <tr>
        <th scope="col" class="time-col">Time</th>
        <th scope="col" class="type-col">Type</th>
        <th scope="col" class="message-col">Message</th>
        <th scope="col" class="origin-col">Origin</th>
        <th scope="col" class="oname-col">Origin Name</th>
    </tr>
    </thead>
</table>
<div id="dropdown-filter" class="hidden">
    <select class="selectpicker" multiple title="ALL" id="dropdown-filter-items">

    </select>
</div>
<div id="relative-time-switch" class="hidden">
    <input type="checkbox"/>
</div>
<script>
    let table = null;
    const startTime = moment.utc("@(Model.Parent.StartTime.ToString("s"))Z");
    const idMap = { @(Html.Raw(string.Join(",\n", Model.Parent.Files.Select(x => $"\"{x.Id}\": \"{x.Name.Split(".")[0].ToUpper()}\"")))) };

    $(document).ready(function() {
        const tableElem = $('#tbl');
        $('#loading').addClass("hidden");
        tableElem.removeClass("hidden");
        const urlWithoutHash = document.URL.split("#")[0];

        table = $('#tbl').DataTable({
            "autoWidth": false,
            "processing": true,
            "paging": false,
            "scrollX": false,
            "scrollY": "50vh",
            "scrollCollapse": true,
            "info": false,
            "searchDelay": 350,
            "columnDefs": [
                { "orderable": true, targets: "time-col", width: "1vw", className: "copy-link" },
                { "orderable": false, targets: "type-col", width: "1vw" },
                { "orderable": false, targets: "message-col", width: "50vw", className: "text-wrap" },
                { "orderable": false, targets: "origin-col", width: "20vw" },
                { "orderable": false, targets: "oname-col", width: "10vw" }
            ],
            "rowCallback": function(row, data) {
                var tag = data[5];
                $(row).addClass("logmessage logmessage-" + data[1].toLowerCase()).attr("id", tag);
                var dateRow = $(row).children(".copy-link");
                var relativeTime = moment.duration(moment.utc(data[0]).diff(startTime)).format("HH:mm:ss", { trim: false });
                var utcTime = moment.utc(data[0]).format("hh:mm:ss");
                dateRow.attr("data-toggle", "tooltip").attr("data-placement", "top").attr("data-html", "true").attr("title", tag + "<br/>Click to copy link")
                    .attr("data-clipboard-text", urlWithoutHash + "#" + tag).attr("data-time-utc", utcTime)
                    .attr("data-time-relative", relativeTime).text(utcTime);
                dateRow.tooltip();
            },
            "language": {
                "emptyTable": "Loading data..."
            }
        });

        loadData();
    });

    function loadData() {
        const dataObj = {
            roundID: @Model.Data.RoundID,
            files: [@(Html.Raw(string.Join(",", Model.Data.Files.Select(x => $"\"{x}\""))))],
            ckeys: [@(Html.Raw(string.Join(",", Model.Data.CKeys.Select(x => $"\"{x}\""))))],
            ranges: [@(Html.Raw(string.Join(",", Model.Data.Ranges.Select(x => $"\"{x}\""))))]
        };

        const messages = $.ajax({
            type: "POST",
            url: "@(Url.Action("FetchMessages", "File"))",
            contentType: "application/json; charset=utf-8",
            beforeSend: function(xhr) {
                xhr.setRequestHeader("RequestVerificationToken",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            dataType: "json",
            data: JSON.stringify(dataObj)
        });

        let toAdd = [];
        $.when(messages).done(function(data) {
            $('#num-messages').text(data.length);
            let types = new Set();
            data.forEach(function(message) {
                if (!types.has(message.type || 'ABNORMAL')) {
                    types.add(message.type || 'ABNORMAL');
                }

                table.row.add([
                    message.timestamp,
                    message.type || 'ABNORMAL',
                    message.message,
                    originToString(message.origin),
                    message.originName,
                    idMap[message.parentFile] + "-" + message.relativeIndex
                ]);
            });
            const checkboxes = $('#dropdown-filter-items');
            types.forEach(function(elem) {
                $("<option>" + elem + "</option>").appendTo(checkboxes);
            });
            checkboxes.selectpicker('refresh');
            table.draw(false);
            table.columns.adjust();
            $('#message-count').removeClass("hidden");

            const hash = $(location).attr('hash');
            if (hash) {
                $('.dataTables_scrollBody').first().scrollTo($(hash), { duration: 800 });
            }

            $('#dropdown-filter').detach().prependTo('#tbl_wrapper .col-md-6:eq(0)').removeClass("hidden");
            $('#relative-time-switch').detach().appendTo('#tbl_wrapper .col-md-6:eq(0)').removeClass("hidden");
            $('#relative-time-switch > input').bootstrapToggle({
                on: 'Relative',
                off: 'UTC'
            }).change(function() {
                if ($(this).prop('checked')) {
                    $('tr.logmessage > td.copy-link').each(function(elem) {
                        $(this).text($(this).attr("data-time-relative"));
                    });
                } else {
                    $('tr.logmessage > td.copy-link').each(function(elem) {
                        $(this).text($(this).attr("data-time-utc"));
                    });
                }
            });
        });
    }

    function originToString(origin) {
        if (!origin) return null;
        return ('(' + origin.x + ', ' + origin.y + ', ' + origin.z + ')');
    }

    $('#dropdown-filter').change(function() {
        const vals = $("#dropdown-filter-items").val() || [];

        if (vals.length === 0) {
            $('#tbl').DataTable().column(1).search("").draw();
        } else {
            $('#tbl').DataTable().column(1).search(vals.join('|'), true, false, true).draw();
        }
    });
</script>